<!DOCTYPE html>
<!-- saved from url=(0041)https://carldanley.com/js-module-pattern/ -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
    <meta http-equiv="X-UA-Compatible" content="IE=edge">

    <title>The Module Pattern</title>
    <meta name="description" content="">

    <meta name="HandheldFriendly" content="True">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <link rel="shortcut icon" href="https://carldanley.com/favicon.ico">

    <link rel="stylesheet" type="text/css" href="./The Module Pattern_files/screen.css">
    <link rel="stylesheet" type="text/css" href="./The Module Pattern_files/css">

    <link rel="canonical" href="http://carldanley.com/js-module-pattern/">
    <meta name="referrer" content="origin">
    <meta name="generator" content="Ghost 0.7">
    <link rel="alternate" type="application/rss+xml" title="Carl Danley" href="https://carldanley.com/rss/">
<style id="fit-vids-style">.fluid-width-video-wrapper{width:100%;position:relative;padding:0;}.fluid-width-video-wrapper iframe,.fluid-width-video-wrapper object,.fluid-width-video-wrapper embed {position:absolute;top:0;left:0;width:100%;height:100%;}</style><style id="style-1-cropbar-clipper">/* Copyright 2014 Evernote Corporation. All rights reserved. */
.en-markup-crop-options {
    top: 18px !important;
    left: 50% !important;
    margin-left: -100px !important;
    width: 200px !important;
    border: 2px rgba(255,255,255,.38) solid !important;
    border-radius: 4px !important;
}

.en-markup-crop-options div div:first-of-type {
    margin-left: 0px !important;
}
</style></head>
<body class="post-template page-template page nav-closed">

    <div class="nav">
    <h3 class="nav-title">Menu</h3>
    <a href="https://carldanley.com/js-module-pattern/#" class="nav-close">
        <span class="hidden">Close</span>
    </a>
    <ul>
            <li class="nav-home" role="presentation"><a href="https://carldanley.com/">Home</a></li>
            <li class="nav-events" role="presentation"><a href="https://carldanley.com/events/">Events</a></li>
            <li class="nav-about" role="presentation"><a href="https://carldanley.com/about/">About</a></li>
    </ul>
    <a class="subscribe-button icon-feed" href="http://carldanley.com/rss/">Subscribe</a>
</div>
<span class="nav-cover"></span>


    <div class="site-wrapper">

        


<header class="main-header post-head no-cover">
    <nav class="main-nav  clearfix">
        
            <a class="menu-button icon-menu" href="https://carldanley.com/js-module-pattern/#"><span class="word">Menu</span></a>
    </nav>
</header>

<main class="content" role="main">
    <article class="post page">

        <header class="post-header">
            <h1 class="post-title">The Module Pattern</h1>
        </header>

        <section class="post-content">
            <p>This pattern is used to mimic classes in conventional software engineering and focuses on public and private access to methods &amp; variables. The module pattern strives to improve the reduction of globally scoped variables, thus decreasing the chances of collision with other code throughout an application.</p>

<p>The module pattern is, by far, the most commonly used design pattern and widely accepted in a number of large projects such as <a href="http://jquery.com/">jQuery</a>, <a href="http://dojotoolkit.org/">Dojo</a>, <a href="http://www.sencha.com/products/extjs">ExtJS</a> and <a href="http://yuilibrary.com/">YUI</a>.</p>

<blockquote>"I'm currently in the process of writing a large-scale JavaScript application based on this pattern, and I have to say, it's a delight." <br>- Brian Cray</blockquote> 

<p>This article is part of a series called <a href="http://carldanley.com/javascript-design-patterns/">JavaScript Design Patterns</a>.</p>

<h2>Advantages</h2>  

<ul>  
<li>Cleaner approach for developers</li>  
<li>Supports private data</li>  
<li>Less clutter in the global namespace</li>  
<li>Localization of functions and variables through closures</li>  
</ul>

<h2>Disadvantages</h2>  

<ul>  
<li>Private methods are unaccessible.<p style="margin: 10px 0 0 0; font-style: italic;">Some people say that this leads to the inability of unit testing but more often than not, if you're questioning the integrity of a function, it should probably be engineered in such a fashion that exposes the utility of that function publicly, thus making it testable. Given the adaptation of the module pattern by jQuery and their everyday use of QUnit to automate testing, this bullet point isn't really relevant but still listed for documentation purposes.</p></li>  
<li>Private methods and functions lose extendability since they are unaccessible (see my comment in the previous bullet point).</li>  
</ul>

<h2>Example</h2>

<script src="./The Module Pattern_files/5da969fbbe2ba3f060da.js"></script><link rel="stylesheet" href="./The Module Pattern_files/gist-embed-51ae8299bd14b6c42fb20b0ce07f643175347abaca051f9c55e114bfc98b10b1.css"><div id="gist6298988" class="gist">
    <div class="gist-file">
      <div class="gist-data">
        <div class="js-gist-file-update-container js-task-list-container file-box">
  <div id="file-module-pattern-example-1-js" class="file">
    

  <div itemprop="text" class="blob-wrapper data type-javascript">
      <table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tbody><tr>
        <td id="file-module-pattern-example-1-js-L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="file-module-pattern-example-1-js-LC1" class="blob-code blob-code-inner js-file-line">( <span class="pl-k">function</span>( <span class="pl-c1">window</span>, <span class="pl-c1">undefined</span> ) {</td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-1-js-L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="file-module-pattern-example-1-js-LC2" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-1-js-L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="file-module-pattern-example-1-js-LC3" class="blob-code blob-code-inner js-file-line">  <span class="pl-c">// normally variables &amp; functions start with a lowercase letter but with modules, that is not the case.</span></td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-1-js-L4" class="blob-num js-line-number" data-line-number="4"></td>
        <td id="file-module-pattern-example-1-js-LC4" class="blob-code blob-code-inner js-file-line">  <span class="pl-c">// The general tradition is to start them with a capital letter instead.</span></td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-1-js-L5" class="blob-num js-line-number" data-line-number="5"></td>
        <td id="file-module-pattern-example-1-js-LC5" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">MyModule</span>() {</td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-1-js-L6" class="blob-num js-line-number" data-line-number="6"></td>
        <td id="file-module-pattern-example-1-js-LC6" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-1-js-L7" class="blob-num js-line-number" data-line-number="7"></td>
        <td id="file-module-pattern-example-1-js-LC7" class="blob-code blob-code-inner js-file-line">    <span class="pl-c">// `this` refers to the instance of `MyModule` when created</span></td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-1-js-L8" class="blob-num js-line-number" data-line-number="8"></td>
        <td id="file-module-pattern-example-1-js-LC8" class="blob-code blob-code-inner js-file-line">    <span class="pl-v">this</span>.<span class="pl-en">myMethod</span> <span class="pl-k">=</span> <span class="pl-k">function</span> <span class="pl-en">myMethod</span>() {</td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-1-js-L9" class="blob-num js-line-number" data-line-number="9"></td>
        <td id="file-module-pattern-example-1-js-LC9" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">alert</span>( <span class="pl-s"><span class="pl-pds">'</span>my method<span class="pl-pds">'</span></span> );</td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-1-js-L10" class="blob-num js-line-number" data-line-number="10"></td>
        <td id="file-module-pattern-example-1-js-LC10" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-1-js-L11" class="blob-num js-line-number" data-line-number="11"></td>
        <td id="file-module-pattern-example-1-js-LC11" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-1-js-L12" class="blob-num js-line-number" data-line-number="12"></td>
        <td id="file-module-pattern-example-1-js-LC12" class="blob-code blob-code-inner js-file-line">    <span class="pl-c">// note that we still use a function declaration even when using a function expression.</span></td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-1-js-L13" class="blob-num js-line-number" data-line-number="13"></td>
        <td id="file-module-pattern-example-1-js-LC13" class="blob-code blob-code-inner js-file-line">    <span class="pl-c">// for more information on why, check out: http://kangax.github.io/nfe/</span></td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-1-js-L14" class="blob-num js-line-number" data-line-number="14"></td>
        <td id="file-module-pattern-example-1-js-LC14" class="blob-code blob-code-inner js-file-line">    <span class="pl-v">this</span>.<span class="pl-en">myOtherMethod</span> <span class="pl-k">=</span> <span class="pl-k">function</span> <span class="pl-en">myOtherMethod</span>() {</td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-1-js-L15" class="blob-num js-line-number" data-line-number="15"></td>
        <td id="file-module-pattern-example-1-js-LC15" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">alert</span>( <span class="pl-s"><span class="pl-pds">'</span>my other method<span class="pl-pds">'</span></span> );</td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-1-js-L16" class="blob-num js-line-number" data-line-number="16"></td>
        <td id="file-module-pattern-example-1-js-LC16" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-1-js-L17" class="blob-num js-line-number" data-line-number="17"></td>
        <td id="file-module-pattern-example-1-js-LC17" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-1-js-L18" class="blob-num js-line-number" data-line-number="18"></td>
        <td id="file-module-pattern-example-1-js-LC18" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-1-js-L19" class="blob-num js-line-number" data-line-number="19"></td>
        <td id="file-module-pattern-example-1-js-LC19" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-1-js-L20" class="blob-num js-line-number" data-line-number="20"></td>
        <td id="file-module-pattern-example-1-js-LC20" class="blob-code blob-code-inner js-file-line">  <span class="pl-c">// expose access to the constructor</span></td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-1-js-L21" class="blob-num js-line-number" data-line-number="21"></td>
        <td id="file-module-pattern-example-1-js-LC21" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1">window</span>.<span class="pl-smi">MyModule</span> <span class="pl-k">=</span> MyModule;</td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-1-js-L22" class="blob-num js-line-number" data-line-number="22"></td>
        <td id="file-module-pattern-example-1-js-LC22" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-1-js-L23" class="blob-num js-line-number" data-line-number="23"></td>
        <td id="file-module-pattern-example-1-js-LC23" class="blob-code blob-code-inner js-file-line">} )( <span class="pl-c1">window</span> );</td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-1-js-L24" class="blob-num js-line-number" data-line-number="24"></td>
        <td id="file-module-pattern-example-1-js-LC24" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-1-js-L25" class="blob-num js-line-number" data-line-number="25"></td>
        <td id="file-module-pattern-example-1-js-LC25" class="blob-code blob-code-inner js-file-line"><span class="pl-c">// example usage</span></td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-1-js-L26" class="blob-num js-line-number" data-line-number="26"></td>
        <td id="file-module-pattern-example-1-js-LC26" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> myModule <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">MyModule</span>();</td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-1-js-L27" class="blob-num js-line-number" data-line-number="27"></td>
        <td id="file-module-pattern-example-1-js-LC27" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">myModule</span>.<span class="pl-en">myMethod</span>(); <span class="pl-c">// alerts "my method"</span></td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-1-js-L28" class="blob-num js-line-number" data-line-number="28"></td>
        <td id="file-module-pattern-example-1-js-LC28" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">myModule</span>.<span class="pl-en">myOtherMethod</span>(); <span class="pl-c">// alerts "my other method"</span></td>
      </tr>
</tbody></table>

  </div>

  </div>
  
</div>

      </div>
      <div class="gist-meta">
        <a href="https://gist.github.com/carldanley/5da969fbbe2ba3f060da/raw/66f4b3af91683dbee661e9bc98394daa3b7cb4e8/module-pattern-example-1.js" style="float:right">view raw</a>
        <a href="https://gist.github.com/carldanley/5da969fbbe2ba3f060da#file-module-pattern-example-1-js">module-pattern-example-1.js</a>
        hosted with ❤ by <a href="https://github.com/">GitHub</a>
      </div>
    </div>
</div>


<p>Another example of the module pattern that exposes the module a little differently and makes use of a shared private cache. This method encourages more of an object creation approach where we can optimize performance by being efficient with shared storage.</p>

<script src="./The Module Pattern_files/8453d2d1f910daa1b3dc.js"></script><link rel="stylesheet" href="./The Module Pattern_files/gist-embed-51ae8299bd14b6c42fb20b0ce07f643175347abaca051f9c55e114bfc98b10b1.css"><div id="gist6309325" class="gist">
    <div class="gist-file">
      <div class="gist-data">
        <div class="js-gist-file-update-container js-task-list-container file-box">
  <div id="file-module-pattern-example-2-js" class="file">
    

  <div itemprop="text" class="blob-wrapper data type-javascript">
      <table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tbody><tr>
        <td id="file-module-pattern-example-2-js-L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="file-module-pattern-example-2-js-LC1" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> MyModule <span class="pl-k">=</span> ( <span class="pl-k">function</span>( <span class="pl-c1">window</span>, <span class="pl-c1">undefined</span> ) {</td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-2-js-L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="file-module-pattern-example-2-js-LC2" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-2-js-L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="file-module-pattern-example-2-js-LC3" class="blob-code blob-code-inner js-file-line">  <span class="pl-c">// this object is used to store private variables and methods across multiple instantiations</span></td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-2-js-L4" class="blob-num js-line-number" data-line-number="4"></td>
        <td id="file-module-pattern-example-2-js-LC4" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">var</span> privates <span class="pl-k">=</span> {};</td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-2-js-L5" class="blob-num js-line-number" data-line-number="5"></td>
        <td id="file-module-pattern-example-2-js-LC5" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-2-js-L6" class="blob-num js-line-number" data-line-number="6"></td>
        <td id="file-module-pattern-example-2-js-LC6" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">function</span> <span class="pl-en">MyModule</span>() {</td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-2-js-L7" class="blob-num js-line-number" data-line-number="7"></td>
        <td id="file-module-pattern-example-2-js-LC7" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-2-js-L8" class="blob-num js-line-number" data-line-number="8"></td>
        <td id="file-module-pattern-example-2-js-LC8" class="blob-code blob-code-inner js-file-line">    <span class="pl-v">this</span>.<span class="pl-en">myMethod</span> <span class="pl-k">=</span> <span class="pl-k">function</span> <span class="pl-en">myMethod</span>() {</td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-2-js-L9" class="blob-num js-line-number" data-line-number="9"></td>
        <td id="file-module-pattern-example-2-js-LC9" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">alert</span>( <span class="pl-s"><span class="pl-pds">'</span>my method<span class="pl-pds">'</span></span> );</td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-2-js-L10" class="blob-num js-line-number" data-line-number="10"></td>
        <td id="file-module-pattern-example-2-js-LC10" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-2-js-L11" class="blob-num js-line-number" data-line-number="11"></td>
        <td id="file-module-pattern-example-2-js-LC11" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-2-js-L12" class="blob-num js-line-number" data-line-number="12"></td>
        <td id="file-module-pattern-example-2-js-LC12" class="blob-code blob-code-inner js-file-line">    <span class="pl-v">this</span>.<span class="pl-en">myOtherMethod</span> <span class="pl-k">=</span> <span class="pl-k">function</span> <span class="pl-en">myOtherMethod</span>() {</td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-2-js-L13" class="blob-num js-line-number" data-line-number="13"></td>
        <td id="file-module-pattern-example-2-js-LC13" class="blob-code blob-code-inner js-file-line">      <span class="pl-en">alert</span>( <span class="pl-s"><span class="pl-pds">'</span>my other method<span class="pl-pds">'</span></span> );</td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-2-js-L14" class="blob-num js-line-number" data-line-number="14"></td>
        <td id="file-module-pattern-example-2-js-LC14" class="blob-code blob-code-inner js-file-line">    };</td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-2-js-L15" class="blob-num js-line-number" data-line-number="15"></td>
        <td id="file-module-pattern-example-2-js-LC15" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-2-js-L16" class="blob-num js-line-number" data-line-number="16"></td>
        <td id="file-module-pattern-example-2-js-LC16" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-2-js-L17" class="blob-num js-line-number" data-line-number="17"></td>
        <td id="file-module-pattern-example-2-js-LC17" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-2-js-L18" class="blob-num js-line-number" data-line-number="18"></td>
        <td id="file-module-pattern-example-2-js-LC18" class="blob-code blob-code-inner js-file-line">  <span class="pl-k">return</span> MyModule;</td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-2-js-L19" class="blob-num js-line-number" data-line-number="19"></td>
        <td id="file-module-pattern-example-2-js-LC19" class="blob-code blob-code-inner js-file-line">  </td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-2-js-L20" class="blob-num js-line-number" data-line-number="20"></td>
        <td id="file-module-pattern-example-2-js-LC20" class="blob-code blob-code-inner js-file-line">} )( <span class="pl-c1">window</span> );</td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-2-js-L21" class="blob-num js-line-number" data-line-number="21"></td>
        <td id="file-module-pattern-example-2-js-LC21" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-2-js-L22" class="blob-num js-line-number" data-line-number="22"></td>
        <td id="file-module-pattern-example-2-js-LC22" class="blob-code blob-code-inner js-file-line"><span class="pl-c">// example usage</span></td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-2-js-L23" class="blob-num js-line-number" data-line-number="23"></td>
        <td id="file-module-pattern-example-2-js-LC23" class="blob-code blob-code-inner js-file-line"><span class="pl-k">var</span> myMod <span class="pl-k">=</span> <span class="pl-k">new</span> <span class="pl-en">MyModule</span>();</td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-2-js-L24" class="blob-num js-line-number" data-line-number="24"></td>
        <td id="file-module-pattern-example-2-js-LC24" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">myMod</span>.<span class="pl-en">myMethod</span>(); <span class="pl-c">// alerts "my method"</span></td>
      </tr>
      <tr>
        <td id="file-module-pattern-example-2-js-L25" class="blob-num js-line-number" data-line-number="25"></td>
        <td id="file-module-pattern-example-2-js-LC25" class="blob-code blob-code-inner js-file-line"><span class="pl-smi">myMod</span>.<span class="pl-en">myOtherMethod</span>(); <span class="pl-c">// alerts "my other method"</span></td>
      </tr>
</tbody></table>

  </div>

  </div>
  
</div>

      </div>
      <div class="gist-meta">
        <a href="https://gist.github.com/carldanley/8453d2d1f910daa1b3dc/raw/99a37222776d63b5cc5f0d0dc21103341dbdee5c/module-pattern-example-2.js" style="float:right">view raw</a>
        <a href="https://gist.github.com/carldanley/8453d2d1f910daa1b3dc#file-module-pattern-example-2-js">module-pattern-example-2.js</a>
        hosted with ❤ by <a href="https://github.com/">GitHub</a>
      </div>
    </div>
</div>


<h2>Additional Resources</h2>

<p><a href="http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html">http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html</a> <br>
<a href="http://macwright.org/2012/06/04/the-module-pattern.html">http://macwright.org/2012/06/04/the-module-pattern.html</a> <br>
<a href="http://briancray.com/posts/javascript-module-pattern">http://briancray.com/posts/javascript-module-pattern</a> <br>
<a href="http://css-tricks.com/how-do-you-structure-javascript-the-module-pattern-edition/">http://css-tricks.com/how-do-you-structure-javascript-the-module-pattern-edition/</a> <br>
<a href="http://addyosmani.com/resources/essentialjsdesignpatterns/book/#modulepatternjavascript">http://addyosmani.com/resources/essentialjsdesignpatterns/book/#modulepatternjavascript</a></p>

<h2>Other Common JS Patterns</h2>

<p><b>The Module Pattern</b> <br>
<a href="http://carldanley.com/js-revealing-module-pattern/">The Revealing Module Pattern</a> <br>
<a href="http://carldanley.com/js-singleton-pattern/">The Singleton Pattern</a> <br>
<a href="http://carldanley.com/js-observer-pattern/">The Observer Pattern</a> <br>
<a href="http://carldanley.com/js-mediator-pattern/">The Mediator Pattern</a> <br>
<a href="http://carldanley.com/js-prototype-pattern/">The Prototype Pattern</a> <br>
<a href="http://carldanley.com/js-facade-pattern/">The Facade Pattern</a> <br>
<a href="http://carldanley.com/js-factory-pattern/">The Factory Pattern</a></p>
        </section>

    </article>
</main>


        <footer class="site-footer clearfix">
            <section class="copyright"><a href="http://carldanley.com/">Carl Danley</a> © 2016</section>
            <section class="poweredby">Proudly published with <a href="https://ghost.org/">Ghost</a></section>
        </footer>

    </div>

    <script type="text/javascript" src="./The Module Pattern_files/jquery-1.12.0.min.js"></script>
    

    <script type="text/javascript" src="./The Module Pattern_files/jquery.fitvids.js"></script>
    <script type="text/javascript" src="./The Module Pattern_files/index.js"></script>



<iframe id="rdbIndicator" width="100%" height="270" border="0" src="./The Module Pattern_files/indicator.html" style="display: none; border: 0; position: fixed; left: 0; top: 0; z-index: 2147483647"></iframe></body></html>